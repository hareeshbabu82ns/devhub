kind: pipeline
name: devhub

steps:
  
## activate tests in future  
# - name: devhub - test
#   image: node:14-alpine
#   commands:
#   - yarn install
#   - yarn test
#   when:
#     branch:
#     - docker

# For Custom Docker Registry
- name: devhub - build docker image
  image: docker:latest
  volumes:
    - name: docker_sock
      path: /var/run/docker.sock
  environment:
    DUSER:
      from_secret: docker_user
    DPASS:
      from_secret: docker_pass
    SERVER_DOMAIN:
      from_secret: server_domain
  commands:
    - docker login -p $DPASS -u $DUSER docker.$SERVER_DOMAIN
    # - docker build --no-cache -t docker.$SERVER_DOMAIN/home/devhub:latest -f Dockerfile .
    - docker build -t docker.$SERVER_DOMAIN/home/devhub:latest -f Dockerfile . 
    # - docker push docker.$SERVER_DOMAIN/home/devhub:latest
  # when:
  #   branch:
  #   - docker

# Deploy app using ansible
- name: apply ansible playbook
  image: plugins/ansible:1
  environment:
    ansible_vault_pass:
      from_secret: ansible_vault_pass
  settings:
    playbook: .ansible/playbook.yml
    # galaxy: .ansible/requirements.yml
    inventory: .ansible/inventory
    private_key:
      from_secret: unraid_ssh_key
    vault_password:
      from_secret: ansible_vault_pass
  # when:
  #   branch:
  #   - master

## Following works when publishing from root of the repository
# - name: build plugins/docker image
#   image: plugins/docker
#   settings:
#     tags:
#       - latest
#     # dockerfile: devhub/Dockerfile
#     repo: test/devhub
#     registry: registry.unraid:33294
#     insecure: true

# - name: devhub - deploy - docker
#   image: docker:latest
#   volumes:
#     - name: docker_sock
#       path: /var/run/docker.sock
#   environment:
#     DUSER:
#       from_secret: docker_user
#     DPASS:
#       from_secret: docker_pass
#     SERVER_DOMAIN:
#       from_secret: server_domain
#     SECRET_KEY:
#       from_secret: secret_key
#   commands:
#     - docker login -p $DPASS -u $DUSER docker.$SERVER_DOMAIN
#     - docker rm devhub
#     - docker run -d -p '23842:8000/tcp' --name='devhub' -e PY_ENV="prod" -e DJANGO_ALLOWED_HOSTS="*" -e SECRET_KEY="$SECRET_KEY" --net='proxynet' -v '/tmp':'/data':'rw,slave' docker.$SERVER_DOMAIN/home/devhub:latest

# - name: devhub - deploy
#   image: sinlead/drone-kubectl
#   settings:
#     kubernetes_server:
#       from_secret: k8s_server
#     kubernetes_cert:
#       from_secret: k8s_cert
#     kubernetes_token:
#       from_secret: k8s_token
#   environment:
#     CLUSTER_DOMAIN:
#       from_secret: cluster_domain
#     SERVER_DOMAIN:
#       from_secret: server_domain
#     DEVHUB_SECRET_KEY:
#       from_secret: devhub_secret_key
#   commands:
#     - sed -i "s/{{cluster_domain}}/$CLUSTER_DOMAIN/g"  ./k8s/deployment.yaml
#     - sed -i "s/{{server_domain}}/$SERVER_DOMAIN/g"  ./k8s/deployment.yaml
#     - sed -i "s/{{devhub_secret_key}}/$DEVHUB_SECRET_KEY/g"  ./k8s/deployment.yaml
#     - kubectl apply -f k8s/deployment.yaml --insecure-skip-tls-verify
#     - kubectl rollout restart deployment/devhub --insecure-skip-tls-verify
#   # when:
#   #   branch:
#   #   - docker

# Finally common tasks for all steps
- name: notify
  image: plugins/slack
  settings:
    channel: pipelines
    webhook:
      from_secret: pipeline_notifier
    icon_emoji: ":rocket:"
    # icon_url: https://unsplash.it/48/48/?random
    # image_url: https://unsplash.it/256/256/?random
    template: >
      {{#if build.pull }}
        *{{#success build.status}}✔{{ else }}✘{{/success}} {{ uppercasefirst build.status }}*: <https://github.com/{{ repo.owner }}/{{ repo.name }}/pull/{{ build.pull }}|Pull Request #{{ build.pull }}>
      {{else}}
        *{{#success build.status}}✔{{ else }}✘{{/success}} {{ uppercasefirst build.status }}: Build #{{ build.number }}* (type: `{{ build.event }}`)
      {{/if}}

      Repo: {{ repo.name }}

      Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
      
      Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>

      Author: {{ build.author }}

      <{{ build.link }}|Visit build page ↗>
  when:
    status: [ success, failure ]

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock
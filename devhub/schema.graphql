scalar Date

scalar DateTime

type Query{
	me: User!
	entityTypes: [EntityType!]!
	languages: [Language!]!
	entities(
		by: EntitiesBy!
	): [Entity!]
	contentLines(
		by: ContentLinesBy!
	): [ContentLine!]
	contentMeanings(
		by: ContentMeaningsBy!
	): [ContentMeaning!]
	bookmarks(
		by: BookmarkByInput
	): [Bookmark!]

	dictionarySearch(
		searchWith: DictionarySearchInput!
	):[DictionaryItem!]

	dictionaryKeySearch(
		key: String!
		inDictionary: Dictionaries
		maxHits: Int = 10
		asDevanagari: Boolean = false
		searchContent: Boolean = false
		fuzzySearch: Boolean = false
	): [DictionaryKey!]!
	dictionaryMeanings(
		keys: [String!]! = []
		inDictionary: Dictionaries
		asDevanagari: Boolean = false
		maxHits: Int = 10
	): [DictionaryItem!]!
	sanskritSplits(
		content: String!
		maxPaths: Int = 10
		asDevanagari: Boolean = false
	): [[String!]]
	sanskritSandhi(
		splits: [String!]! = []
		asDevanagari: Boolean = false
	): [String!]
}

type Mutation{
	updateBookmark(
		id: ID
		withData: BookmarkUpdateInput!
	): Bookmark!
	deleteBookmark(
		id: ID!
	): Boolean
	deleteEntity(
		id: ID!
	): Boolean
	updateEntityContent(
		"""
		id is optional, if creating entity
		"""
		id: ID
		withData: EntityContentInput!
	): Entity!
	updateContent(
		"""
		id is optional, if creating content
		"""
		id: ID
		withData: ContentLineInput
	): ContentLine!
	deleteContent(
		id: ID!
	): Boolean
	updateContentMeaning(
		"""
		id is optional, if creating meaining
		"""
		id: ID
		withData: ContentMeaningInput
	): ContentMeaning!
	deleteContentMeaning(
		id: ID!
	): Boolean
	updateSettings(
		user: ID!
		content: String!
	): Settings!
}

type Bookmark{
	id: ID
	user: String!
	entity: Entity
	url: String
}

input BookmarkByInput{
	id: ID
	entity: ID
	url: String
}

input BookmarkUpdateInput{
	entity: ID
	url: String
}

input BookmarkInput{
	entity: ID!
	url: String
}

input EntityContentInput{
	parentId: ID
	defaultText: String
	type: ID
	order: Int
	tags: String
	textData: [EntityTextDataInput!] = []
	metaData: [EntityMetaDataInput!] = []
	content: [ContentLineInput!] = []
	meaning: [ContentMeaningInput!] = []
	extras: [ContentExtrasInput!] = []
}

input EntityMetaDataInput{
	id: ID
	name: String!
	description: String
}

input EntityTextDataInput{
	id: ID
	language: ID!
	text: String!
	description: String
}

input ContentLineInput{
	parentEntity: ID
	language: ID!
	content: String!
}

input ContentMeaningsBy{
	id: ID
	parent: ID
	language: ID
}

input ContentMeaningInput{
	parentEntity: ID
	language: ID!
	content: String!
}

input ContentExtrasInput{
	language: ID!
	content: String!
}

input EntitiesBy{
	id: ID
	type: ID
	text: String
	textLike: String
}

input ContentLinesBy{
	id: ID
	parent: ID
	language: ID
}

input RelatedEntitiesBy{
	type: ID
	hasContentInLanguage: ID
}

"""
Type of the Entity ex. God, Author, Slokam etc.
"""
type EntityType{
	id: ID!
	name: String!
	description: String
}

"""
ISO Language identifier ex. SAN, TEL, ENG etc.
"""
type Language{
	id: ID!
	iso: String!
	name: String!
	description: String
}

"""
Base Entity of the system ex Slokam, Adhyaayam, Grandham etc.
"""
type Entity{
	id: ID!
	type: EntityType!
	order: Int
	"""
	fallback default Text for Entity if TextData is missing
	"""
	defaultText: String!
	defaultThumbnail: String!
	"""
	',' delimited tags for identification    
	"""
	tags: String
	childEntities(
		by: RelatedEntitiesBy
	): [Entity!]
	parentEntities(
		by: RelatedEntitiesBy
	): [Entity!]
	textData(
		language: ID
	): [EntityText!]
	metaData: [EntityMeta!]
	content(
		language: ID!
	): [ContentLine!]
	contentMeaning(
		language: ID!
	): [ContentMeaning!]
	childTypes: [EntityType!]
}

"""
Entity to Entity Relationship
"""
type EntityRelation{
	id: ID!
	fromEntity: Entity!
	fromType: EntityType!
	toEntity: Entity!
	toType: EntityType!
}

"""
Text data for the Entity (leaf node of the Graph)
"""
type EntityText{
	id: ID!
	parentEntity: Entity!
	"""
	parent Entity Type
	"""
	type: EntityType!
	language: Language!
	text: String!
	description: String
}

"""
Meta Data for the Entity (leaf node of the Graph, sibling to TextData)
"""
type EntityMeta{
	id: ID!
	parentEntity: Entity!
	"""
	parent Entity Type
	"""
	type: EntityType!
	name: String!
	description: String
}

"""
Acutual content of the Entity
"""
type ContentLine{
	id: ID!
	parentEntity: Entity!
	language: Language!
	content: String!
	meaning(
		language: ID!
	): ContentMeaning
	extras: ContentExtras
}

"""
Content related meaning
"""
type ContentMeaning{
	id: ID!
	parent: Entity!
	language: Language!
	content: String!
}

"""
Content related extra data
"""
type ContentExtras{
	id: ID!
	parent: Entity!
	language: Language!
	content: String!
}

type User{
	"""
	user name
	"""
	id: ID!
	displayName: String
	settings: Settings
}

"""
user specific Settings
"""
type Settings{
	id: ID!
	user: ID!
	content: String
}

input DictionarySearchInput {
		search: String!
		"""
		Search String scheme (default: SLP1)
		"""
		searchScheme: SanscriptScheme
		"""
		full text search on key and description
		"""
		fuzzySearch: Boolean = false
		"""
		Searches only in Keys, skips checking in descriptions \
		`ignored when fuzzySearch is selected`
		"""
		searchOnlyKeys: Boolean = false
		caseInsensitive: Boolean = false
		"""
		searches where the input is at starting position \
		`ignored when fuzzySearch is selected`
		"""
		startsWith: Boolean = false
		"""
		searches where the input is at ending position \
		`ignored when fuzzySearch is selected`
		"""
		endsWith: Boolean = false
		origin: Dictionaries
		"""
		scheme for output (default: DEVANAGARI)
		"""
		outputScheme: SanscriptScheme
		limit: Int = 100	
}

"""
Dictionary Tools
"""
type DictionaryItem{
	id: ID!
	key: String!
	fromDictionary: Dictionaries!
	content: String!
}

type DictionaryKey{
	id: ID!
	devanagari: String
}

"""
Sanskript Dictionary Sources
"""
enum Dictionaries{
	"""
	Vacaspatyam
	"""
	VCP
	"""
	Dhatu Pata
	"""
	DHATU_PATA
	"""
	Monier-Williams
	"""
	MW
	"""
	Monier-Williams English
	"""
	MWE
	"""
	Sabda-kalpadruma
	"""
	SKD
}
"""
Sanskript Transliterate Schemes
"""
enum SanscriptScheme{
	"""
	Devanagari (Samskrutam)
	"""
	DEVANAGARI
	"""
	International Alphabet of Sanskrit Transliteration
	"""
	IAST
	"""
	Indian languages TRANSliteration
	"""
	ITRANS
	"""
	Sanskrit Library Phonetic Basic
	"""
	SLP1
	TELUGU
	TAMIL
	KANNADA
}
schema{
	query: Query,
	mutation: Mutation
}